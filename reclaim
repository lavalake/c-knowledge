/*
 * ======RTE====== Memory allocation:
 *      hnd_free(w): Free previously allocated memory at w
 *      hnd_malloc_align(size, abits): Allocate memory at a 2^abits boundary
 *      hnd_memavail(): Return a (slightly optimistic) estimate of free memory
 *      hnd_hwm(): Return a high watermark of allocated memory
 *      hnd_print_heapuse(): Dump heap usage stats.
 *      hnd_print_memwaste(): Malloc memory to simulate low memory environment
 *      hnd_print_malloc(): (BCMDBG_MEM) Dump free & inuse lists
 *      hnd_arena_add(base, size): Add a block of memory to the arena
 */
#define MIN_MEM_SIZE    8       /* Min. memory size is 8 bytes */
#define MIN_ALIGN       4       /* Alignment at 4 bytes */
#ifdef HNDLBUFCOMPACT
#define MAX_ALIGN       LB_RAMSIZE
#else
#define MAX_ALIGN       16384   /* Max alignment at 16k */
#endif
#define ALIGN(ad, al)   (((ad) + ((al) - 1)) & ~((al) - 1))
#define ALIGN_DOWN(ad, al)      ((ad) & ~((al) - 1))

#ifdef BCMDBG_MEM

typedef struct _mem_dbg {
        uint32          magic;
        uchar           *malloc_function;
        uchar           *free_function;
        const char      *file;
        int             line;
        uint32          size;
        struct _mem_dbg *next;
} mem_t;

static mem_t    free_mem_dbg;           /* Free list head */

/* Note: the dummy_mem structure and pointer is purely to satisfy the rom symbol size check.
 * free_mem is not used.
typedef struct _dummy_mem {
        uint32          size;
        struct _dummy_mem       *next;
} dummy_mem_t;

static dummy_mem_t      free_mem;       /* Free list head */
dummy_mem_t *dummy_mem_p = &free_mem;

#else /* ! BCMDBG_MEM */

typedef struct _mem {
        uint32          size;
        struct _mem     *next;
} mem_t;

/* XXX: Access only through hnd_freemem_get() to avoid shdat issues */
static mem_t    free_mem;               /* Free list head */

static mem_t* hnd_freemem_get(void);
#endif /* BCMDBG_MEM */

static uint     arena_size;             /* Total heap size */
static uint     inuse_size;             /* Current in use */
static uint     inuse_overhead;         /* tally of allocated mem_t blocks */
static uint     inuse_hwm;              /* High watermark of memory - reclaimed memory */
static uint     mf_count;               /* Malloc failure count */
/* mutex macros for thread safe */
#ifdef HND_HEAP_THREAD_SAFE
#define HND_HEAP_MUTEX_DECL(mutex)              OSL_EXT_MUTEX_DECL(mutex)
#define HND_HEAP_MUTEX_CREATE(name, mutex)      osl_ext_mutex_create(name, mutex)
#define HND_HEAP_MUTEX_DELETE(mutex)            osl_ext_mutex_delete(mutex)
#define HND_HEAP_MUTEX_ACQUIRE(mutex, msec)     osl_ext_mutex_acquire(mutex, msec)
#define HND_HEAP_MUTEX_RELEASE(mutex)   osl_ext_mutex_release(mutex)
#else
#define HND_HEAP_MUTEX_DECL(mutex)
#define HND_HEAP_MUTEX_CREATE(name, mutex)      OSL_EXT_SUCCESS
#define HND_HEAP_MUTEX_DELETE(mutex)            OSL_EXT_SUCCESS
#define HND_HEAP_MUTEX_ACQUIRE(mutex, msec)     OSL_EXT_SUCCESS
#define HND_HEAP_MUTEX_RELEASE(mutex)   OSL_EXT_SUCCESS
#endif  /* HND_HEAP_THREAD_SAFE */

HND_HEAP_MUTEX_DECL(heap_mutex);

#ifdef HNDLBUFCOMPACT
static void hnd_lbuf_fixup_2M_tcm(void);
#endif

#ifdef BCMDBG_MEM
#define MEM_MAGIC       0x4d4e4743      /* Magic # for mem overwrite check: 'MNGC' */

static mem_t    inuse_mem;              /* In-use list head */

static void hnd_print_malloc(void *arg, int argc, char *argv[]);

#else /* BCMDBG_MEM */

/** XXX: Accessor function forced into RAM to keep free_mem out of shdat */
static mem_t*
BCMRAMFN(hnd_freemem_get)(void)
{
        return (&free_mem);
}
#endif /* BCMDBG_MEM */

typedef struct _arena_segment {
        uint32  size;
        void    *base;
} arena_segment_t;

#define MAX_ARENA_SEGMENTS 8
static arena_segment_t arena_segments[MAX_ARENA_SEGMENTS];
static uint32 arena_segment_count = 0;

static void
BCMRAMFN(record_arena_segment)(void *base, uint32 size)
{
        if (arena_segment_count < MAX_ARENA_SEGMENTS) {
                arena_segments[arena_segment_count].base = base;
                arena_segments[arena_segment_count].size = size;
                arena_segment_count++;
        }
        else
        {
                /* If this check fires, it just means that there are more arena segments than slots
                 * in the tracking array. Increment MAX_ARENA_SEGMENTS above to permit tracking of
                 * all segments.
                 */
                printf("%s: Error Number of arena segments exceed MAX_ARENA_SEGMENTS\n",
                       __FUNCTION__);
                hnd_die();
        }
}

bool
BCMATTACHFN(hnd_arena_init)(uintptr base, uintptr lim)
{
        mem_t *first;
#ifndef BCMDBG_MEM
        mem_t *free_memptr;
#endif

        ASSERT(base);
        ASSERT(lim > base);

        /* create mutex for critical section locking */
        if (HND_HEAP_MUTEX_CREATE("heap_mutex", &heap_mutex) != OSL_EXT_SUCCESS) {
                return FALSE;
        }

        /* Align */
        first = (mem_t *)ALIGN(base, MIN_ALIGN);

        arena_size = lim - (uint32)first;
        inuse_size = 0;
        inuse_overhead = 0;
        inuse_hwm = 0;

        mf_count = 0;
#ifdef BCMDBG_MEM
        free_mem_dbg.magic = inuse_mem.magic = first->magic = MEM_MAGIC;
        inuse_mem.next = NULL;
#endif /* BCMDBG_MEM */
        first->size = arena_size - sizeof(mem_t);
        first->next = NULL;
#ifdef BCMDBG_MEM
        free_mem_dbg.next = first;
#else
        free_memptr = hnd_freemem_get();
        free_memptr->next = first;
#endif /* BCMDBG_MEM */
        record_arena_segment(first, arena_size);

#ifdef HNDLBUFCOMPACT
        hnd_lbuf_fixup_2M_tcm();
#endif
        return TRUE;
}

uint
hnd_arena_add(uint32 base, uint size)
{
        uint32 addr;
        mem_t *this;

        addr = ALIGN(base, MIN_ALIGN);
        if ((addr - base) > size) {
                /* Ignore this miniscule thing,
                 * otherwise size below will go negative!
                 */
                return 0;
        }
        size -= (addr - base);
        size = ALIGN_DOWN(size, MIN_ALIGN);

        if (size < (sizeof(mem_t) + MIN_MEM_SIZE)) {
                /* Don't bother, drop it on the floor (XXX: it could coalese ...) */
                return 0;
        }

        if (HND_HEAP_MUTEX_ACQUIRE(&heap_mutex, OSL_EXT_TIME_FOREVER) != OSL_EXT_SUCCESS)
                return 0;

        this = (mem_t *)addr;
        arena_size += size;
        record_arena_segment(this, size);
        size -= sizeof(mem_t);
        addr += sizeof(mem_t);
        this->size = size;

        /* This chunk was not in use before, make believe it was */
        inuse_size += size;
        inuse_overhead += sizeof(mem_t);

#ifdef BCMDBG_MEM
        this->magic = MEM_MAGIC;
        this->file = NULL;
        this->line = 0;
        this->next = inuse_mem.next;
        inuse_mem.next = this;
        printf("%s: Adding %p: 0x%x(%d) @ 0x%x\n", __FUNCTION__, this, size, size, addr);
#else
        this->next = NULL;
#endif /* BCMDBG_MEM */

        if (HND_HEAP_MUTEX_RELEASE(&heap_mutex) != OSL_EXT_SUCCESS)
                return 0;

        hnd_free((void *)addr);

#ifdef HNDLBUFCOMPACT
        hnd_lbuf_fixup_2M_tcm();
#endif
        return (size);
}

void *
#if defined(BCMDBG_MEM) || defined(BCMDBG_MEMFAIL)
hnd_malloc_align(uint size, uint alignbits, const char *file, int line)
#else
hnd_malloc_align(uint size, uint alignbits)
#endif /* BCMDBG_MEM */
{
        mem_t   *curr, *last, *this = NULL, *prev = NULL;
        uint    align, rem, waste;
        uintptr addr = 0, top = 0;
        uint    inuse_total;
        void    *ptr = NULL;

#ifdef BCMDBG_MEM
        const char *basename;
#endif /* BCMDBG_MEM */

        ASSERT(size);

        size = ALIGN(size, MIN_ALIGN);

        BUZZZ_LVL5(HND_MALLOC, 2, (uint32)CALL_SITE, size);

        align = 1 << alignbits;
        if (align <= MIN_ALIGN)
                align = MIN_ALIGN;
        else if (align > MAX_ALIGN)
                align = MAX_ALIGN;

        if (HND_HEAP_MUTEX_ACQUIRE(&heap_mutex, OSL_EXT_TIME_FOREVER) != OSL_EXT_SUCCESS)
                return  NULL;

        /* Search for available memory */
#ifdef BCMDBG_MEM
        last = &free_mem_dbg;
#else
        last = hnd_freemem_get();
#endif /* BCMDBG_MEM */
        waste = arena_size;

        /* Algorithm: best fit */
        while ((curr = last->next) != NULL) {
                if (curr->size >= size) {
                        /* Calculate alignment */
                        uintptr lowest = (uintptr)curr + sizeof(mem_t);
                        uintptr end = lowest + curr->size;
                        uintptr highest = end - size;
                        uintptr a = ALIGN_DOWN(highest, align);

                        /* Find closest sized buffer to avoid fragmentation BUT aligned address
                         * must be greater or equal to the lowest address available in the free
                         * block AND lowest address is aligned with "align" bytes OR
                         * space preceeding a returned block's header is either big
                         * enough to support another free block
                         */
                        if (a >= lowest &&
                            (ISALIGNED(lowest, align) || (a-lowest) >= sizeof(mem_t)) &&
                            (curr->size - size) < waste)
                        {

                                waste = curr->size - size;
                                this = curr;
                                prev = last;
                                top = end;
                                addr = a;

                                if (waste == 0)
                                        break;
                        }
                }
                last = curr;
        }

        if (this == NULL) {
                mf_count++; /* Increment malloc failure count */
#if defined(BCMDBG_MEM) || defined(BCMDBG_MEMFAIL)
                printf("No memory to satisfy request for %d bytes, inuse %d, file %s, line %d\n",
                       size, (inuse_size + inuse_overhead), file ? file : "unknown", line);
#ifdef BCMDBG_MEM
                hnd_print_malloc(NULL, 0, NULL);
#endif
#else
                HND_MSG(("No memory to satisfy request %d bytes, inuse %d\n", size,
                         (inuse_size + inuse_overhead)));
#endif /* BCMDBG_MEM */
                goto done;
        }

#ifdef BCMDBG_MEM
        ASSERT(this->magic == MEM_MAGIC);
#endif

#ifdef GLOBAL_STACK
        hnd_stack_check();
#endif

        /* best fit has been found as below
         *  - split above or below if tht's big enough
         *  - otherwise adjust size to absorb those tiny gap
         *
         *      ----------------  <-- this
         *          mem_t
         *      ----------------
         *
         *       waste(not used)
         *      ----------------  <-- addr
         *      alignment offset
         *      ----------------
         *          size
         *
         *      ----------------  <-- top
         */

        /* Anything above? */
        rem = (top - addr) - size;
        if (rem < sizeof(mem_t)) {
                /* take it all */
                size += rem;
        } else {
                /* Split off the top */
                mem_t *new = (mem_t *)(addr + size);

                this->size -= rem;
                new->size = rem - sizeof(mem_t);
#ifdef BCMDBG_MEM
                new->magic = MEM_MAGIC;
#endif /* BCMDBG_MEM */
                new->next = this->next;
                this->next = new;
        }

        /* Anything below? */
        rem = this->size - size;
        if (rem < sizeof(mem_t)) {
                /* take it all */
                prev->next = this->next;
        } else {
                /* Split this */
                mem_t *new = (mem_t *)((uint32)this + rem);

                new->size = size;
                this->size = rem - sizeof(mem_t);
#ifdef BCMDBG_MEM
                new->magic = MEM_MAGIC;
#endif /* BCMDBG_MEM */

                this = new;
        }

#ifdef BCMDBG_MEM
        this->next = inuse_mem.next;
        inuse_mem.next = this;
        this->line = line;
        basename = strrchr(file, '/');
        /* skip the '/' */
        if (basename)
                basename++;
        if (!basename)
                basename = file;
        this->file = basename;
        this->malloc_function = CALL_SITE;
#else
        this->next = NULL;
#endif /* BCMDBG_MEM */
        inuse_size += this->size;
        inuse_overhead += sizeof(mem_t);

        /* find the instance where the free memory was the least to calculate
         * inuse memory hwm
         */
        inuse_total = inuse_size + inuse_overhead;
        if (inuse_total > inuse_hwm)
                inuse_hwm = inuse_total;

#ifdef BCMDBG_MEM
        HND_MSG(("malloc: 0x%x\n", (uint32) ((void *)((uintptr)this + sizeof(mem_t)))));
#endif

        ptr = (void *)((uint32)this + sizeof(mem_t));
done:
        if (HND_HEAP_MUTEX_RELEASE(&heap_mutex) != OSL_EXT_SUCCESS) {
                if (ptr)
                        hnd_free(ptr);
                return NULL;
        }
        return ptr;
}

#ifdef HNDLBUFCOMPACT
/* HNDLBUFCOMPACT is implemented based on an assumption that
 * lbuf head and end addresses falls into the same 2M bytes address boundary.
 *
 * However, ATCM and BTCM are spanning over 2M address boundary in many dongle chips.
 * So, if lbuf is allocated at the end of ATCM, it could cross 2M boundary over to BTCM.
 *
 * In order to avoid this kind of situation, we make a hole of 4 bytes memory at 2M address.
 * This function allocates 4 bytes memory at all possible 2M aligned addresses.
 *
 * This function must be called whenever new memory region is added to arena.
 * (i.e., in hnd_arena_init() and hnd_arena_add())
*/
void
hnd_lbuf_fixup_2M_tcm(void)
{
        /* Reserving 4 bytes memory at all 2M boundary to create a hole */
#if defined(BCMDBG_MEM) || defined(BCMDBG_MEMFAIL)
        while (hnd_malloc_align(4, 21, __FILE__, __LINE__) != NULL)
#else
        while (hnd_malloc_align(4, 21) != NULL)
#endif
                ;       /* empty */

        mf_count--;     /* decrement malloc failure count to avoid confusion,
                           because this was an intended/expected failure by the logic
                           because this was an intended/expected failure by the logic
                        */
}
#endif /* HNDLBUFCOMPACT */

static int
hnd_malloc_size(void *where)
{
        uint32 w = (uint32)where;
        mem_t *this;

#ifdef BCMDBG_MEM
        mem_t *prev;

        /* Get it off of the inuse list */
        prev = &inuse_mem;
        while ((this = prev->next) != NULL) {
                if (((uint32)this + sizeof(mem_t)) == w)
                        break;
                prev = this;
        }

        if (this == NULL) {
                HND_MSG(("%s: 0x%x is not in the inuse list\n", __FUNCTION__, w));
                ASSERT(this);
                return -1;
        }

        if (this->magic != MEM_MAGIC) {
                HND_MSG(("\n%s: Corrupt magic (0x%x) in 0x%x; size %d; file %s, line %d\n\n",
                       __FUNCTION__, this->magic, w, this->size, this->file, this->line));
                ASSERT(this->magic == MEM_MAGIC);
                return -1;
        }

#else
        this = (mem_t *)(w - sizeof(mem_t));
#endif /* BCMDBG_MEM */

        return this->size;
}

void *
hnd_realloc(void *ptr, uint size)
{
        int osz = hnd_malloc_size(ptr);

        if (osz < 0)
                return NULL;

        /* xxx optimize this */
        void *new = hnd_malloc(size);
        if (new == NULL)
                return NULL;
        memcpy(new, ptr, MIN(size, osz));
        hnd_free(ptr);
        return new;
}

int
hnd_free(void *where)
{
        uint32 w = (uint32)where;
        mem_t *prev, *next, *this;
        int err = 0;

        BUZZZ_LVL5(HND_FREE, 1, (uint32)CALL_SITE);

        if (HND_HEAP_MUTEX_ACQUIRE(&heap_mutex, OSL_EXT_TIME_FOREVER) != OSL_EXT_SUCCESS)
                return -1;

#ifdef BCMDBG_MEM
        /* Get it off of the inuse list */
        prev = &inuse_mem;
        while ((this = prev->next) != NULL) {
                if (((uint32)this + sizeof(mem_t)) == w)
                        break;
                prev = this;
        }

        if (this == NULL) {
                HND_MSG(("%s: 0x%x is not in the inuse list\n", __FUNCTION__, w));
                ASSERT(this);
                err = -1;
                goto done;
        }

        if (this->magic != MEM_MAGIC) {
                HND_MSG(("\n%s: Corrupt magic (0x%x) in 0x%x; size %d; file %s, line %d\n\n",
                       __FUNCTION__, this->magic, w, this->size, this->file, this->line));
                ASSERT(this->magic == MEM_MAGIC);
                err = -1;
                goto done;
        }

        this->free_function = CALL_SITE;
        prev->next = this->next;
#else
        this = (mem_t *)(w - sizeof(mem_t));
#endif /* BCMDBG_MEM */

        inuse_size -= this->size;
        inuse_overhead -= sizeof(mem_t);

        /* Find the right place in the free list for it */
#ifdef BCMDBG_MEM
        prev = &free_mem_dbg;
#else
        prev = hnd_freemem_get();
#endif /* BCMDBG_MEM */
        while ((next = prev->next) != NULL) {
                if (next >= this)
                        break;
                prev = next;
        }

        /* Coalesce with next if appropriate */
        if ((w + this->size) == (uint32)next) {
                this->size += next->size + sizeof(mem_t);
                this->next = next->next;
#ifdef BCMDBG_MEM
                next->magic = 0;
#endif /* BCMDBG_MEM */
        } else
                this->next = next;

        /* Coalesce with prev if appropriate */
        if (((uint32)prev + sizeof(mem_t) + prev->size) == (uint32)this) {
                prev->size += this->size + sizeof(mem_t);
                prev->next = this->next;
#ifdef BCMDBG_MEM
                this->magic = 0;
#endif /* BCMDBG_MEM */
        } else
                prev->next = this;

        err = 0;
#ifdef BCMDBG_MEM
done:
done:
#endif /* BCMDBG_MEM */
        if (HND_HEAP_MUTEX_RELEASE(&heap_mutex) != OSL_EXT_SUCCESS)
                return -1;
        return err;
}

void *
hnd_calloc(uint num, uint size)
{
        void *ptr;

        ptr = hnd_malloc(size*num);
        if (ptr)
                bzero(ptr, size*num);

        return (ptr);
}

uint
hnd_memavail(void)
{
        uint mem_avail;

        if (HND_HEAP_MUTEX_ACQUIRE(&heap_mutex, OSL_EXT_TIME_FOREVER) != OSL_EXT_SUCCESS)
                return 0;
        mem_avail = arena_size - inuse_size - inuse_overhead;
        if (HND_HEAP_MUTEX_RELEASE(&heap_mutex) != OSL_EXT_SUCCESS)
                return 0;
        return (mem_avail);
}

void
hnd_meminuse(uint *inuse, uint *inuse_oh)
{
        if (HND_HEAP_MUTEX_ACQUIRE(&heap_mutex, OSL_EXT_TIME_FOREVER) != OSL_EXT_SUCCESS)
                        return;
        if (inuse != NULL)
                *inuse = inuse_size;
        if (inuse_oh != NULL)
                *inuse_oh = inuse_overhead;
        if (HND_HEAP_MUTEX_RELEASE(&heap_mutex) != OSL_EXT_SUCCESS)
                return;
}

uint
hnd_hwm(void)
{
        return (inuse_hwm);
}


#ifndef BCM_BOOTLOADER
#if defined(RTE_CONS)

/*
* Function to get heap memory usage
* for both dhd cons hu and wl memuse commands
*/

int
hnd_get_heapuse(memuse_info_t *mu)
{
        hnd_image_info_t info;
        size_t rodata_len;

        if (mu == NULL)
                return -1;

        hnd_image_info(&info);

        mu->ver = 0;

        mu->text_len = (info._text_end - info._text_start);
        rodata_len = (info._rodata_end - info._rodata_start);
        mu->data_len = (info._data_end - info._data_start);
        mu->bss_len = (info._bss_end - info._bss_start);

        if (HND_HEAP_MUTEX_ACQUIRE(&heap_mutex, OSL_EXT_TIME_FOREVER) != OSL_EXT_SUCCESS)
                return -1;

        mu->arena_size = arena_size;
        mu->inuse_size = inuse_size;
        mu->inuse_hwm = inuse_hwm;
        mu->inuse_overhead = inuse_overhead;

        mu->text_len += rodata_len;
        mu->tot = mu->text_len + mu->data_len + mu->bss_len;

        mu->tot += mu->inuse_hwm;

        mu->inuse_total = mu->inuse_size + mu->inuse_overhead;
        mu->arena_free = mu->arena_size - mu->inuse_total;

        if (HND_HEAP_MUTEX_RELEASE(&heap_mutex) != OSL_EXT_SUCCESS)
                return -1;
        return 0;
}
#ifdef BCMDBG_MEM
int
hnd_memcheck(char *file, int line)
{
        mem_t *this = NULL;
        int err = 0;

        if (HND_HEAP_MUTEX_ACQUIRE(&heap_mutex, OSL_EXT_TIME_FOREVER) != OSL_EXT_SUCCESS)
                return 1;

        this = inuse_mem.next;
        while (this) {
                if (this->magic != MEM_MAGIC) {
                        printf("CORRUPTION: %s %d\n", file, line);
                        printf("\n%s: Corrupt magic (0x%x); size %d; file %s, line %d\n\n",
                               __FUNCTION__, this->magic, this->size, this->file, this->line);
                        err = 1;
                        goto out;
                }
                this = this->next;
        }
out:
        if (HND_HEAP_MUTEX_RELEASE(&heap_mutex) != OSL_EXT_SUCCESS)
                return 1;
        return err;
}






